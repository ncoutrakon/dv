main = "Number of Event Types per Year")
plot(table(stormdf$EVTYPE))
plot(stormdf$EVTYPE)
table(stormdf$year)
freqyears <- table(stormdf$year)
plot(names(freqyears), freqyears, xlab = "Year", ylab =" Frequency",
main = "Number of Events per Year")
plot(freqyears)
plot(freqyears, type = "p")
plot(freqyears, type = "p", xlab = "Year", ylab =" Frequency",
main = "Number of Events per Year")
colnames(stormdf)
head(stormdf$PROPDMG)
head(stormdf$PROPDMGEXP)
summary(storm$propdmgexp)
summary(stormdf$propdmgexp)
summary(stormdf$PROPDMGEXP)
table(stormdf$PROPDMGEXP)
head(stormdf)
table(stormdf$PROPDMGEXP)
table(stormdf$CROPDMGEXP)
dmg <- data.frame(sym = c("K", "M". "B"), val = c(1000, 1000000, 1000000000))
dmg
dmg <- data.frame(sym = c("K", "M". "B"), val = c(1000, 1000000, 1000000000))
dmg <- data.frame(sym = c("K", "M", "B"), val = c(1000, 1000000, 1000000000))
dmg
sort(table(stormdf$EVTYPE))
max(freqEVTYPE[1:which( names(freqEVTYPE) == 2003)])
which(freqEVTYPE == 387)
freqEVTYPE("2003")
freqEVTYPE["2003"]
freqEVTYPE["2002"]
stormdf <- stormdf[which(stormdf$year > 2002),]
freqyears <- table(stormdf$year)
plot(freqyears, type = "p", xlab = "Year", ylab =" Frequency",
main = "Number of Events per Year")
table(stormdf$EVTYPE)
sort(table(stormdf$EVTYPE))
hist(sort(table(stormdf$EVTYPE)))
plot(sort(table(stormdf$EVTYPE)))
barplot(sort(table(stormdf$EVTYPE)))
barplot(sort(table(stormdf$EVTYPE)), horiz = F, cex.names = .8)
barplot(sort(table(stormdf$EVTYPE)), cex.names = .5, las = 2)
barplot(sort(table(stormdf$EVTYPE)), cex.names = .3, las = 2)
barplot(sort(table(stormdf$EVTYPE)), cex.names = .5, las = 2)
barplot(sort(table(stormdf$EVTYPE)), cex.names = .3, las = 2)
table(stormdf$CROPDMGEXP)
table(stormdf$CPROPDMGEXP)
table(stormdf$PROPDMGEXP)
x <- factor(stormdf$PROPDMGEXP, levels = c("0", "K", "M", "B"), labels = c(0, 1000, 1000000, 1000000000))
head(x)
table(stormdf$PROPDMGEXP, useNA = "always")
table(stormdf$PROPDMGEXP, useNA = "ifany")
table(stormdf$CROPDMGEXP, useNA = "ifany")
head(stormdf$CROPDMGEXP)
file.exists(stfile)
stormdf <- read.csv(stfile, stringsAsFactors = F, na.strings = "")
head(stormdf$CROPDMGEXP)
stormdf$posixtime <- strptime(stormdf[,2], "%m/%d/%Y %H:%M:%S")
stormdf$year <- as.numeric(format(stormdf$posixtime, "%Y"))
freqEVTYPE <- tapply(stormdf$EVTYPE, stormdf$year, function(x) length(table(x)))
plot(names(freqEVTYPE), freqEVTYPE, xlab = "Year", ylab =" Frequency",
main = "Number of Event Types per Year")
class(freqEVTYPE)
stormdf <- stormdf[which(stormdf$year > 2002),]
freqyears <- table(stormdf$year)
plot(freqyears, type = "p", xlab = "Year", ylab =" Frequency",
main = "Number of Events per Year")
barplot(sort(table(stormdf$EVTYPE)), cex.names = .3, las = 2,
ylab = "Frequency", main = "Frequency of Events, 2003-2011")
barplot(sort(table(stormdf$EVTYPE)), cex.names = .3, las = 4,
ylab = "Frequency", main = "Frequency of Events, 2003-2011")
barplot(sort(table(stormdf$EVTYPE)), cex.names = .3, las = 1,
ylab = "Frequency", main = "Frequency of Events, 2003-2011")
barplot(sort(table(stormdf$EVTYPE)), cex.names = .3, las = 3,
ylab = "Frequency", main = "Frequency of Events, 2003-2011")
barplot(sort(table(stormdf$EVTYPE)), cex.names = .3, las = 0,
ylab = "Frequency", main = "Frequency of Events, 2003-2011")
barplot(sort(table(stormdf$EVTYPE)), cex.names = .3, las = 1,
ylab = "Frequency", main = "Frequency of Events, 2003-2011")
barplot(sort(table(stormdf$EVTYPE)), cex.names = .3, las = 2,
ylab = "Frequency", main = "Frequency of Events, 2003-2011")
sort(table(stormdf$EVTYPE))
dmg <- data.frame(sym = c("K", "M", "B"), val = c(1000, 1000000, 1000000000))
class(stormdf$CROPDMGEXP)
factor(stormdf$CROPDMGEXP, levels = c("K", "M", "B"), labels = c(1000, 1000000, 1000000000))
x <- factor(stormdf$CROPDMGEXP, levels = c("K", "M", "B"), labels = c(1000, 1000000, 1000000000))
class(x)
summary(x)
x <- factor(stormdf$CROPDMGEXP, levels = c("K", "M", "B", NA), labels = c(1000, 1000000, 1000000000, 0))
head((X))
head(x
)
y <- factor(stormdf$PROPDMGEXP, levels = c("K", "M", "B"), labels = c(1000, 1000000, 1000000000))
head(y)
y[2]
y[2] == NA
y[2] == <NA.
y[2] == <NA>
Y[1]
y[1]
y[1]*5
mtcars
table(mtcars[1:3])
table(mtcars[1:4])
quantile(rnorm(100))
cut(rnorm(100), 2)
getwd()
list.files()
file.exists("bre")
file.exists("stormdata.csv")
mtcars
mtcars[,1]
rownames(mtcars)
cut(rownames(mtcars))
split(mtcars$mpg, mtcars$cyl)
format("12  6  2015", "%m  %d  %Y")
getwd()
load("~/r/bre/testing/ARIMA_TED.Rdata.RData")
rug(1:10)
head(mtcars)
hist(subset(mtcars, cyl == 6)$mpg)
plot(subset(mtcars, cyl == 6)$mpg)
library(ggplot2)
qplot(hp, wt, facets=vs ~ am)
qplot(hp, wt, data <- mtcars, facets=vs ~ am)
qplot(hp, wt, data = mtcars, facets=vs ~ am)
table(mtcars$vs)
qplot(hp, wt, data = mtcars, facets=am)
qplot(hp, wt, data = mtcars, facets= am)
qplot(hp, wt, data = mtcars, facets= vs)
qplot(hp, wt, data = mtcars, facets= vs ~ am)
qplot(hp, wt, data = mtcars, facets= vs ~ vs)
qplot(hp, wt, data = mtcars, facets= ~ vs)
qplot(hp, wt, data = mtcars, facets= am ~ vs ~ gear)
plot(mpg, hp, mtcars)
boxplot(mpg, hp, mtcars)
plot(mpg ~ hp, mtcars)
boxplot(mpg ~ hp, mtcars)
boxplot(mpg ~ gear, mtcars)
plot(mpg ~ gear, mtcars)
example(points)
getwd()
setwd("/coursera-reproducible-research")
setwd("coursera-reproducible-research")
getwd()
setwd("/")
getwd()
setwd("/Users/ncoutrakon/r/coursera-reproducible-research/")
getwd()
getwd()
getwd("./")
setwd("./")
getwd()
x <- read.csv("activity.csv", stringsAsFactors = FALSE, colClasses = c("numeric", "POSIXct", "numeric"))
list.files()
getwd()
setwd(".")
getwd()
setwd("~")
getwd()
set.seed(12345)
par(mar = rep(.2, 4))
dataMatrix <- matrix(rnowm(400), nrow = 40)
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix): 1])
image(1:10, 1:40, t(dataMatrix)[, 1: nrow(dataMatrix)])
dataMatrix
t(dataMatrix)
image(t(dataMatrix)[, 1: nrow(dataMatrix)])
image(1:10, 1:40)
image(dataMatrix[, 1: nrow(dataMatrix)])
image(dataMatrix[, nrow(dataMatrix):1])
image(1:40, 1:10, dataMatrix[, nrow(dataMatrix):1])
image(dataMatrix)
image(t(dataMatrix))
image(dataMatrix)
image(t(dataMatrix))
heatmap(dataMatrix)
par(mar = rep(.2, 4))
heatmap(dataMatrix)
rep(c(0,3), 3)
rep(c(0,3), each = 3)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
hh
hh$order
hh[34,]
str(hh)
hh
svd1 <- svd(scale(dataMatrixOrdered))
svd1
str(svd1)
svd1$d
svd1$u
heatmap(svd1$u)
svd1
str(svd1)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)
rm(fit)
beta1 <- corr(x, y) * sd(y)/sd(x)
beta1 <- cor(x, y) * sd(y)/sd(x)
beta0 <- mean(y) - beta1*mean(x)
yhat <- beta0 + beta1*x
n <- length(y)
e <- y - beta0 -beta1 * x
sigma <- sqrt(sum(e^2)/ (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1/n+mean(x)^2/ssx)^.5*sigma
seBeta1 <- sigma / sqrt(ssx)
tbeta0 <- beta0 / sebeta0
tbeta0 <- beta0 / seBeta0
tbeta1 <- beta1 / seBeta1
pbeta0 <- 2 * pt(abs(tbeta0), df = n-2, lower.tail = F)
pbeta1 <- 2 * pt(abs(tbeta1), df = n-2, lower.tail = F)
pbeta1
sigma
head(mtcars)
with(mtcars, fit <- lm(mpg ~ wt))
fit
with(mtcars, lm(mpg ~ wt))
fit <- lm(mtcars$mpg ~ mtcars$wt))
fit <- lm(mtcars$mpg ~ mtcars$wt)
fit
summary(fit)
confint(fit)
pt(0)
pt(0, df = 1)
pt(0, df = 2)
pt(0, df = 5)
pt(.5, df = 5)
pt(.5, df = 4)
pt(.5, df = 99)
pt(.5, df = 100)
pt(-.5, df = 100)
pt(-.5, df = 100, lower.tail = F)
qt(-.5, df = 100, lower.tail = F)
qt(1, df = 1)
qt(1, df = 2)
qt(.7, df = 2)
x <- rnorm(20)
y <- rnorm(20)
beta1 <- cor(x, y) * sd(y) / sd(x)
beta0 <- y - beta1*x
beta0 <- mean(y) - beta1*mean(x)
e <- y - beta0 - beta1*x
ssx <- sum((x - mean(x))^2)
sigma <- sqrt(sum(e^2) / (n-2))
n <- length(x)
sigma <- sqrt(sum(e^2) / (n-2))
sebeta1 <- sigma / ssx
setwd("./r/bre/rubber")
getwd()
setwd("./bre/rubber")
library(Quandl)
library(ggplot2)
library(reshape2)
library(Quandl)
library(ggplot2)
library(reshape2)
load("./data/symbols.Rda")
listrubber <- lapply(instnames, get)
names(listrubber) <- instnames
#Reduce takes a binary function and a list of data items and
#successively applies the function to the list elements in a recursive fashion.
# Eg. merge(merg(x,y), z)
rubber <- Reduce(function(x, y) merge(x, y, all = F), listrubber)
rubber <- rubber[, seq(from = 4, to = length(instnames)*4, by = 4)]
names(rubber) <- instnames
outrights <- rubber
rubber$Spread1 <- rubber$TF1 - rubber$TF2
rubber$Spread2 <- rubber$TF2 - rubber$TF3
rubber$Spread3 <- rubber$TF3 - rubber$TF4
rubber$Spread4 <- rubber$TF4 - rubber$TF5
spreads <- rubber[,6:9]
rubber$Fly1 <- rubber$S1 - rubber$S2
rubber$Fly2 <- rubber$S2 - rubber$S3
rubber$Fly3 <- rubber$S3 - rubber$S4
flys <- rubber[,10:12]
#plot front month
toplot <- c("outrights", "spreads", "flys")
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE, scales = "free")) +
geom_line() + xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
library(Quandl)
library(ggplot2)
library(reshape2)
load("./data/symbols.Rda")
listrubber <- lapply(instnames, get)
names(listrubber) <- instnames
#Reduce takes a binary function and a list of data items and
#successively applies the function to the list elements in a recursive fashion.
# Eg. merge(merg(x,y), z)
rubber <- Reduce(function(x, y) merge(x, y, all = F), listrubber)
rubber <- rubber[, seq(from = 4, to = length(instnames)*4, by = 4)]
names(rubber) <- instnames
outrights <- rubber
rubber$Spread1 <- rubber$TF1 - rubber$TF2
rubber$Spread2 <- rubber$TF2 - rubber$TF3
rubber$Spread3 <- rubber$TF3 - rubber$TF4
rubber$Spread4 <- rubber$TF4 - rubber$TF5
spreads <- rubber[,6:9]
rubber$Fly1 <- rubber$S1 - rubber$S2
rubber$Fly2 <- rubber$S2 - rubber$S3
rubber$Fly3 <- rubber$S3 - rubber$S4
flys <- rubber[,10:12]
#plot front month
toplot <- c("outrights", "spreads", "flys")
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE,)) +
geom_line() + xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
load("./data/symbols.Rda")
listrubber <- lapply(instnames, get)
names(listrubber) <- instnames
rubber <- Reduce(function(x, y) merge(x, y, all = F), listrubber)
rubber <- rubber[, seq(from = 4, to = length(instnames)*4, by = 4)]
names(rubber) <- instnames
outrights <- rubber
rubber$Spread1 <- rubber$TF1 - rubber$TF2
rubber$Spread2 <- rubber$TF2 - rubber$TF3
rubber$Spread3 <- rubber$TF3 - rubber$TF4
rubber$Spread4 <- rubber$TF4 - rubber$TF5
spreads <- rubber[,6:9]
rubber$Fly1 <- rubber$S1 - rubber$S2
rubber$Fly2 <- rubber$S2 - rubber$S3
rubber$Fly3 <- rubber$S3 - rubber$S4
flys <- rubber[,10:12]
head(rubber)
spreads
head(spreads)
names(rubber)
rubber$Fly1 <- rubber$Spread1 - rubber$Spread2
rubber$Fly2 <- rubber$Spread2 - rubber$Spread3
rubber$Fly3 <- rubber$Spread3 - rubber$Spread4
flys <- rubber[,10:12]
#plot front month
toplot <- c("outrights", "spreads", "flys")
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE,)) +
geom_line() + xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE)) +
geom_line() + facet_wrap(~facet, scales = "free") xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE)) +
geom_line() + facet_wrap(~facet, scales = "free") + xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
x <- fortify(flys, melt =T)
head(x)
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE)) +
geom_line() + facet_wrap(~Series, scales = "free") + xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE)) +
geom_line() + facet_grid(~Series, scales = "free") + xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE)) +
geom_line() + facet_grid(~Series, scales = "free", as.table = F) + xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE)) +
geom_line() + facet_grid(~Series, scales = "free") + xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE)) +
geom_line() + facet_wrap(~Series, scales = "free") + xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE)) +
geom_line() + facet_grid(~Series, scales = "free") + xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE)) +
geom_line() + facet_grid(~Series, scales = "free", space = "free") + xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE)) +
geom_line() + facet_wrap(~Series, scales = "free") + xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE)) +
geom_line() + facet_wrap(~Series, scales = "free", ncol =1) + xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
head(rubber)
rubber$2month1 <- rubber$Spread1 - rubber$Spread3
rubber$2month2 <- rubber$Spread2 - rubber$Spread4
rubber$2month3 <- rubber$Spread3 - rubber$Spread5
rubber$3month1 <- rubber$Spread1 - rubber$Spread4
rubber$3month2 <- rubber$Spread2 - rubber$Spread5
oddspreads <- rubber[,13:17]
rubber$2month1 <- rubber$Spread1 - rubber$Spread3
rubber$TwoMonth1 <- rubber$Spread1 - rubber$Spread3
rubber$TwoMonth2 <- rubber$Spread2 - rubber$Spread4
rubber$TwoMonth3 <- rubber$Spread3 - rubber$Spread5
rubber$ThreeMonth1 <- rubber$Spread1 - rubber$Spread4
rubber$ThreeMonth2 <- rubber$Spread2 - rubber$Spread5
oddspreads <- rubber[,13:17]
toplot <- c("outrights", "spreads", "flys", "oddspreads")
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE)) +
geom_line() + facet_wrap(~Series, scales = "free", ncol =1) + xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
head(oddspreads)
rubber$ThreeMonth2 <- rubber$Spread2 - rubber$Spread5
head(rubber)
library(Quandl)
library(ggplot2)
library(reshape2)
load("./data/symbols.Rda")
listrubber <- lapply(instnames, get)
names(listrubber) <- instnames
#Reduce takes a binary function and a list of data items and
#successively applies the function to the list elements in a recursive fashion.
# Eg. merge(merg(x,y), z)
rubber <- Reduce(function(x, y) merge(x, y, all = F), listrubber)
rubber <- rubber[, seq(from = 4, to = length(instnames)*4, by = 4)]
names(rubber) <- instnames
outrights <- rubber
rubber$Spread1 <- rubber$TF1 - rubber$TF2
rubber$Spread2 <- rubber$TF2 - rubber$TF3
rubber$Spread3 <- rubber$TF3 - rubber$TF4
rubber$Spread4 <- rubber$TF4 - rubber$TF5
spreads <- rubber[,6:9]
rubber$Fly1 <- rubber$Spread1 - rubber$Spread2
rubber$Fly2 <- rubber$Spread2 - rubber$Spread3
rubber$Fly3 <- rubber$Spread3 - rubber$Spread4
flys <- rubber[,10:12]
rubber$TwoMonth1 <- rubber$Spread1 - rubber$Spread3
rubber$TwoMonth2 <- rubber$Spread2 - rubber$Spread4
rubber$ThreeMonth1 <- rubber$Spread1 - rubber$Spread4
oddspreads <- rubber[,13:15]
#plot front month
toplot <- c("outrights", "spreads", "flys", "oddspreads")
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE)) +
geom_line() + facet_wrap(~Series, scales = "free", ncol =1) + xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
library(Quandl)
library(ggplot2)
library(reshape2)
load("./data/symbols.Rda")
listrubber <- lapply(instnames, get)
names(listrubber) <- instnames
#Reduce takes a binary function and a list of data items and
#successively applies the function to the list elements in a recursive fashion.
# Eg. merge(merg(x,y), z)
rubber <- Reduce(function(x, y) merge(x, y, all = F), listrubber)
rubber <- rubber[, seq(from = 4, to = length(instnames)*4, by = 4)]
names(rubber) <- instnames
outrights <- rubber
rubber$Spread1 <- rubber$TF1 - rubber$TF2
rubber$Spread2 <- rubber$TF2 - rubber$TF3
rubber$Spread3 <- rubber$TF3 - rubber$TF4
rubber$Spread4 <- rubber$TF4 - rubber$TF5
spreads <- rubber[,6:9]
rubber$Fly1 <- rubber$Spread1 - rubber$Spread2
rubber$Fly2 <- rubber$Spread2 - rubber$Spread3
rubber$Fly3 <- rubber$Spread3 - rubber$Spread4
flys <- rubber[,10:12]
rubber$TwoMonth1 <- rubber$Spread1 - rubber$Spread3
rubber$TwoMonth2 <- rubber$Spread2 - rubber$Spread4
rubber$ThreeMonth1 <- rubber$Spread1 - rubber$Spread4
oddspreads <- rubber[,13:15]
#plot front month
toplot <- c("outrights", "spreads", "flys", "oddspreads")
for (i in toplot){
plot1 <-ggplot(aes(x = Index, y = Value), data = fortify(get(i), melt = TRUE)) +
geom_line() + facet_wrap(~Series, scales = "free", ncol =1) + xlab("") + ylab("")
ggsave(filename = paste("./out/", "plot", i,".pdf", sep = ""), plot = plot1,
height = 11, width = 8)
}
