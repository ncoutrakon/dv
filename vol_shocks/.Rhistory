mtcars[,1]
rownames(mtcars)
cut(rownames(mtcars))
split(mtcars$mpg, mtcars$cyl)
format("12  6  2015", "%m  %d  %Y")
getwd()
load("~/r/bre/testing/ARIMA_TED.Rdata.RData")
rug(1:10)
head(mtcars)
hist(subset(mtcars, cyl == 6)$mpg)
plot(subset(mtcars, cyl == 6)$mpg)
library(ggplot2)
qplot(hp, wt, facets=vs ~ am)
qplot(hp, wt, data <- mtcars, facets=vs ~ am)
qplot(hp, wt, data = mtcars, facets=vs ~ am)
table(mtcars$vs)
qplot(hp, wt, data = mtcars, facets=am)
qplot(hp, wt, data = mtcars, facets= am)
qplot(hp, wt, data = mtcars, facets= vs)
qplot(hp, wt, data = mtcars, facets= vs ~ am)
qplot(hp, wt, data = mtcars, facets= vs ~ vs)
qplot(hp, wt, data = mtcars, facets= ~ vs)
qplot(hp, wt, data = mtcars, facets= am ~ vs ~ gear)
plot(mpg, hp, mtcars)
boxplot(mpg, hp, mtcars)
plot(mpg ~ hp, mtcars)
boxplot(mpg ~ hp, mtcars)
boxplot(mpg ~ gear, mtcars)
plot(mpg ~ gear, mtcars)
example(points)
getwd()
setwd("/coursera-reproducible-research")
setwd("coursera-reproducible-research")
getwd()
setwd("/")
getwd()
setwd("/Users/ncoutrakon/r/coursera-reproducible-research/")
getwd()
getwd()
getwd("./")
setwd("./")
getwd()
x <- read.csv("activity.csv", stringsAsFactors = FALSE, colClasses = c("numeric", "POSIXct", "numeric"))
list.files()
getwd()
setwd(".")
getwd()
setwd("~")
getwd()
set.seed(12345)
par(mar = rep(.2, 4))
dataMatrix <- matrix(rnowm(400), nrow = 40)
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix): 1])
image(1:10, 1:40, t(dataMatrix)[, 1: nrow(dataMatrix)])
dataMatrix
t(dataMatrix)
image(t(dataMatrix)[, 1: nrow(dataMatrix)])
image(1:10, 1:40)
image(dataMatrix[, 1: nrow(dataMatrix)])
image(dataMatrix[, nrow(dataMatrix):1])
image(1:40, 1:10, dataMatrix[, nrow(dataMatrix):1])
image(dataMatrix)
image(t(dataMatrix))
image(dataMatrix)
image(t(dataMatrix))
heatmap(dataMatrix)
par(mar = rep(.2, 4))
heatmap(dataMatrix)
rep(c(0,3), 3)
rep(c(0,3), each = 3)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
hh
hh$order
hh[34,]
str(hh)
hh
svd1 <- svd(scale(dataMatrixOrdered))
svd1
str(svd1)
svd1$d
svd1$u
heatmap(svd1$u)
svd1
str(svd1)
n <- 20
nosim <- 1000
test <- sample(0:1, n)
test <- sample(0:1, n, replace = T)
head(test)
qnorm(mean = 80, sd = 10, p = c(.16, .08, .22, .32))
pnorm(mean = 80, sd = 10, q = 70)
(70 - 80)/ (10)
qnorm(mean = 1100, sd = 75, p = .95)
1100 + 1.96*75/sqrt(100)
1100 + 1.96*75
1100 + 1.96*75/sqrt(1000)
binom.test(4, 5, .5)
choose(5, 4)
5*.5^5
+.5^5
10 / 1
pnorm(-.1, 15, 10, lower.tail = F)
pnorm(-.1, 15, 10, lower.tail = T)
pnorm(14, 15, 10, lower.tail = T)
pnorm(14, 15, 10, lower.tail = F)
pnorm(16, 15, 10, lower.tail = T)
ppois(10, 15, 10, lower.tail = T)
ppois(10,lambda = 5 * 3, lower.tail = T)
qnorm(.95, 1100, 75)
1100 + 1.96*75
1100 + 1.64*75
1100 + 1.64*75/sqrt(10)
1100 + 1.64*75/sqrt(1000)
1100 + 1.64*75/sqrt(1)
1100 + 1.64*75/sqrt(2)
1100 + 1.64*75/sqrt(100)
1100 + 1.64*75/sqrt(1000)
(70 -80) / (10)
qnorm(-1)
pnorm(-1)
1100 + 75*1.64
qnorm(.95, 1100, 75)
1100 + 75*1.64/sqrt(100)
binom.test(5, 5)
pbinom(4, 5,prob = .5)
pbinom(2, 5,prob = .5)
pbinom(1, 5,prob = .5)
pbinom(1, 5,prob = .5, lower.tail = F)
pbinom(4, 5,prob = .5, lower.tail = F)
pbinom(5, 3,prob = .5, lower.tail = F)
pbinom(5, 4,prob = .5, lower.tail = F)
rbind(3, 5)
rbind(3, 5, prob = .5)
rbinom(3, 5)
rbinom(3, 5, prob = .5)
rbinom(2, 5, prob = .5)
rbinom(2, 2, prob = .5)
rbinom(7, 2, prob = .5)
pbinom(4, 5, prob = .5)
dbinom(4:5,5, prob = .5)
pbinom(4, 5, prob = .5, lower.tail = F)
pbinom(5, 5, prob = .5, lower.tail = F)
pbinom(4.5, 5, prob = .5, lower.tail = F)
pbinom(4.9, 5, prob = .5, lower.tail = F)
dpois(10, 5*3)
dpois(10, 15)
ppois(10, 5*3)
ppois(10, 15)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- x *frac
return(whole + fr)
}
dollarFR(12.75, frac = 4)
dollarFR(12.75)
floor(12.75)
12.75 - 12
.75*4
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- x *frac
whole
}
dollarFR(12.75)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- x *frac
fr
}
dollarFR(12.75)
class(floor(12.25))
floor(12.25)
floor(12.75)
12.75 - floor(12.75)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
whole + fr
}
dollarFR(12.75)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
whole + fr * 10 ^(-nchar(fr))
}
dollarFR(12.75)
dollarFR(12.80)
.3*4
nchar(1.2)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
fr
}
dollarFR(12.80)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
while (fr != round(fr)) { fr <- fr *10}
fr
}
dollarFR(12.80)
round(12.8)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
while (fr != floor(fr)) { fr <- fr *10}
fr
}
dollarFR(12.80)
3.2 != floor(3.2)
floor(3.2)
3.2 == floor(3.2)
3.2 != floor(3.2)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
x <- fr
while (fr != floor(fr)) { x <- x *10}
x
}
dollarFR(12.80)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
x <- fr
while (fr != floor(x)) { x <- x *10}
x
}
dollarFR(12.80)
3.2 * 10
32 == floor (32)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
while (fr != floor(fr)) { fr <- fr *10}
fr
}
dollarFR(12.80)
3.2 != floor(3.2)
32 != floor(32)
fr
fr <- 3.2
while (fr != floor(fr)) { fr <- fr *10
print(fr)}
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
while (fr != floor(fr)) { fr <- fr *10}
fr
}
dollarFR(12.80)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
while (fr != floor(fr)) { fr <- fr *10}
return(fr)
}
dollarFR(12.80)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
print(fr)
while (fr != floor(fr)) { fr <- fr*10
print(fr)}
}
dollarFR(12.80)
320 == floor(320)
is.infinite(3.2)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
while (!is.integer(fr)) { fr <- fr*10}
fr
}
dollarFR(12.80)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
if (!is.integer(fr)) {fr <- fr *10}
print(is.integer(fr))
fr
}
dollarFR(12.80)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
if (!is.integer(fr)) {fr <- fr *10}
print(is.integer(fr))
print(class(fr))
fr
}
dollarFR(12.80)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
if (fr != floor(fr))) {fr <- fr *10}
print(floor(fr))
fr
}
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
if (fr != floor(fr)) {fr <- fr *10}
print(floor(fr))
fr
}
dollarFR(12.80)
dollarFR <- function(x, frac = 4){
whole <- floor(x)
fr <- x - whole
fr <- fr *frac
if (fr != floor(fr)) {fr <- fr *10}
print(fr == floor(fr))
fr
}
dollarFR(12.80)
as.integer(".32")
.32*10^nchar(.32)
nchar(.32)
nchar(as.character(.32))
nchar(1)
nchar(12)
nchar(12.)
nchar(12.4)
nchar(12.3)
nchar(.1)
nchar(.)
nchar(\.2)
x <- .23
length(.32)
count(.32)
paste(123,".32, sep = ")
paste(123,".32, sep = "")
)
)
""
paste(123,.32, sep = "")
paste(123,32, sep = "")
format(.32, digits = 2)
as.numeric(format(.32, digits = 2))
as.numeric(paste(format(123, digits = 3), format(.32, digits = 2), sep =""))
cat(123, .32)
.32
dollarDE <- function(x, frac = 4) {
whole <- floor(x)
de <- x - whole
de <- de * 10 ^ nchar(frac)
return ( whole + de / frac)
}
dollarDE(123.12)
dollarDE(123.80)
dollarDE(123.375)
library(Quandl)
#gets data, saves .Rda file with dataframe for each instrument and
#a character vector containing the names of each dataframe saved
keepws <- ls()
instnames <- c("VX", "ZN", "ES", "ED3m", "EDfly")
instruments <- c(VX = "YAHOO/INDEX_VIX", ZN = "CHRIS/CME_TY1", ES = "YAHOO/INDEX_GSPC",
ED1 = "CHRIS/CME_ED1", ED4 = "CHRIS/CME_ED4", ED7 = "CHRIS/CME_ED7")
for (i in 1:length(instruments)){
assign(names(instruments[i]), Quandl(instruments[i], type = "zoo", start_date = "1990-01-01"))
assign(names(instruments[i]), get(names(instruments[i]))[,1:4])
dateDownloaded <- date()
}
#Create Eurodollar Front 3month Spread and Butterfly
ED3m <- (ED1 - ED4)*10
EDfly <- (ED1 - 2*ED4 + ED7)*10
ZN <- ZN / .015625   #converts ZN into ticks
save(list = c(instnames, "dateDownloaded", "instnames"), file = "./data/symbols.Rda")
rm(list = ls()[!(ls() %in% keepws)])
library(Quandl)
#gets data, saves .Rda file with dataframe for each instrument and
#a character vector containing the names of each dataframe saved
keepws <- ls()
instnames <- c("VX", "ZN", "ES", "ED3m", "EDfly")
instruments <- c(VX = "YAHOO/INDEX_VIX", ZN = "CHRIS/CME_TY1", ES = "YAHOO/INDEX_GSPC",
ED1 = "CHRIS/CME_ED1", ED4 = "CHRIS/CME_ED4", ED7 = "CHRIS/CME_ED7")
for (i in 1:length(instruments)){
assign(names(instruments[i]), Quandl(instruments[i], type = "zoo", start_date = "1990-01-01"))
assign(names(instruments[i]), get(names(instruments[i]))[,1:4])
dateDownloaded <- date()
}
#Create Eurodollar Front 3month Spread and Butterfly
ED3m <- (ED1 - ED4)*10
EDfly <- (ED1 - 2*ED4 + ED7)*10
ZN <- ZN / .015625   #converts ZN into ticks
save(list = c(instnames, "dateDownloaded", "instnames"), file = "./data/symbols.Rda")
rm(list = ls()[!(ls() %in% keepws)])
getwd()
setwd("./bre/vol_shocks")
library(Quandl)
#gets data, saves .Rda file with dataframe for each instrument and
#a character vector containing the names of each dataframe saved
keepws <- ls()
instnames <- c("VX", "ZN", "ES", "ED3m", "EDfly")
instruments <- c(VX = "YAHOO/INDEX_VIX", ZN = "CHRIS/CME_TY1", ES = "YAHOO/INDEX_GSPC",
ED1 = "CHRIS/CME_ED1", ED4 = "CHRIS/CME_ED4", ED7 = "CHRIS/CME_ED7")
for (i in 1:length(instruments)){
assign(names(instruments[i]), Quandl(instruments[i], type = "zoo", start_date = "1990-01-01"))
assign(names(instruments[i]), get(names(instruments[i]))[,1:4])
dateDownloaded <- date()
}
#Create Eurodollar Front 3month Spread and Butterfly
ED3m <- (ED1 - ED4)*10
EDfly <- (ED1 - 2*ED4 + ED7)*10
ZN <- ZN / .015625   #converts ZN into ticks
save(list = c(instnames, "dateDownloaded", "instnames"), file = "./data/symbols.Rda")
rm(list = ls()[!(ls() %in% keepws)])
library(Quandl)
library(ggplot2)
library(reshape)
setwd("~/r/bre/vol_shocks")
source("./funs/trueRange.R"); source("./funs/adhoc.R"); load("./data/symbols.Rda")
source("~/r/funs/multiplot.R")
events <- read.csv("./data/events.csv", row.names = NULL, colClasses = c("character", "Date", "character", "numeric", "character"))
events <- events[order(events$Date,events$Casualties),]
row.names(events) <- 1:dim(events)[1]
#adds *TradeDate* columne to *events* df, TradeDat is day of or tradeable date after event
events$TradeDate <- events$Date
for (i in 1:length(events$TradeDate)){
while (!(events$TradeDate[i] %in% time(VX))){
events$TradeDate[i] <- events$TradeDate[i] + 1
}
}
#adds True Range columns to each raw df
for (i in instnames) assign(i, cbind(get(i), TR = trueRange(get(i))))
##creates True Range dataframe for each instrument, containing event name, TR, ATR, pctr, apctr. puts it into *truesymb* list
truesymb <- list()
truelist <- character()
k = 1
for (j in instnames){
assign(paste(j, "TR", sep =""), data.frame())
for (i in 1:dim(events)[1]){
tevent <- events$Event[i]
tdate <- events$TradeDate[i]
#get True Range, Ave TR, percent TR, Ave percent TR
TR <- get(j)[tdate,5]
ATR <- mean(window(get(j), start = tdate - 42, end = tdate-1)[,5])
px <- as.numeric(get(j)[tdate, 4])
pct <- abs(TR / px) * 100
atrpct <- abs(ATR / px) * 100
#creates new df
assign(paste(j, "TR", sep =""), rbind(get(paste(j, "TR", sep ="")), c(tevent, TR, ATR, pct, atrpct, j)))
}
#creates list of new dfs and names of new dfs
truesymb[[k]] <-  get(paste(j, "TR", sep =""))
truelist[k] <- paste(j, "TR", sep ="")
k <- k + 1
}
#adds TradeDate to each TR dataframe, names them, and melts for graphing
truesymb <- setNames(lapply(truesymb, addTradeDate), truelist)
truesymb <- lapply(truesymb, setNames, c("TradeDate", "Event", "Event TR", "6wk TR",
"TR Pct Change", "6wk TR Pct Change", "Instrument"))
meltsymb <- lapply(truesymb, melt, id.vars = c("TradeDate", "Event", "Instrument"))
#creates list of dataframes with outliers and complications removed
outsymb <- lapply(truesymb, remOutlier)
outmeltsymb <- lapply(outsymb, melt, id.vars = c("TradeDate", "Event", "Instrument"))
outmeltsymb <- lapply(outmeltsymb, addType)
#creates df for only september11 and flash crash data
septmeltsymb <- lapply(meltsymb, septcrash)
septdf <- do.call("rbind", septmeltsymb)
#all outlier removed graphics
for (i in outmeltsymb) {panelPrint(i)}
#flash crash and sept11 graphics
pdf("./out/septcrash.pdf", height = 11, width = 8)
ggplot(septdf) + geom_point(aes(Event, value, color = variable, shape = variable)) + facet_wrap(Type ~ Instrument, scales ="free", nrow = 2) +
labs(x ="", y ="") + ggtitle("Flash Crash and September 11 True Range") +
scale_x_discrete(labels=c("Flash Crash" = "FC", "September 11" = "9/11")) +
theme(legend.title = element_blank())
dev.off()
head(ZN)
head(ZN) / ,015625
head(ZN) / .015625
head(ZN) * .015625
head(ZN) *64
head(ZN) /64
dolllarDE <- function(x, frac = 4) {
whole <- floor(x)
de <- x - whole
de <- de * 10 ^ nchar(frac)
return ( whole + de / frac)
}
dollarDE(123.8)
dolllarDE <- function(x, frac = 4) {
whole <- floor(x)
de <- x - whole
de <- de * 10 ^ nchar(frac)
return ( whole + de / frac)
}
dollarDE(123.8)
