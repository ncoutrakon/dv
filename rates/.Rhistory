x = .96, y = .96, hjust = 1, vjust = 1))
assign(paste("plot",instnames[i],sep=""), ggplot(data=k, aes(x=Date, colour = chg)) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank())+
ggtitle(instnames[i]) +
annotation_custom(j) +
geom_linerange(aes(ymin=Low, ymax=High)) +
geom_segment(aes(y = Open, yend = Open, xend = Date - width / 2 )) +
geom_segment(aes(y = Close, yend = Close, xend = Date + width / 2)) +
scale_colour_manual(values = c("dn" = "darkred", "up" = "green")) +
guides(colour = FALSE))
plots[[i]] <- get(paste("plot",instnames[i],sep=""))
}
jpeg(file = paste("/Users/ncoutrakon/r/bre/snapshot/out/",sdate,"_bench.jpeg", sep =""))
.multiplot(plotlist = plots, cols = plotcol)
dev.off()
names(bench) <- instnames
bench <- lapply(bench, forPlot)
for (i in 1:length(instnames)){
assign(instnames[i], bench[[i]])
}
plots <- list()
for (i in seq(instnames)){
k <- get(instnames[i])
l <- paste(": ",k[dim(k)[1],5],"(" ,k[dim(k)[1],8],"%)", sep = "")
j <- grobTree(textGrob(l, gp = gpar(fontsize = 9.5),
x = .96, y = .96, hjust = 1, vjust = 1))
assign(paste("plot",instnames[i],sep=""), ggplot(data=k, aes(x=Date, colour = chg)) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank())+
ggtitle(paste(instnames[i], l)) +
#annotation_custom(j) +
geom_linerange(aes(ymin=Low, ymax=High)) +
geom_segment(aes(y = Open, yend = Open, xend = Date - width / 2 )) +
geom_segment(aes(y = Close, yend = Close, xend = Date + width / 2)) +
scale_colour_manual(values = c("dn" = "darkred", "up" = "green")) +
guides(colour = FALSE))
plots[[i]] <- get(paste("plot",instnames[i],sep=""))
}
jpeg(file = paste("/Users/ncoutrakon/r/bre/snapshot/out/",sdate,"_bench.jpeg", sep =""))
.multiplot(plotlist = plots, cols = plotcol)
dev.off()
plots <- list()
for (i in seq(instnames)){
k <- get(instnames[i])
l <- paste(": ",k[dim(k)[1],5]," (" ,k[dim(k)[1],8],"%)", sep = "")
#j <- grobTree(textGrob(l, gp = gpar(fontsize = 9.5),
#                      x = .96, y = .96, hjust = 1, vjust = 1))         ADDS TEXT TO GRAPH
assign(paste("plot",instnames[i],sep=""), ggplot(data=k, aes(x=Date, colour = chg)) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank())+
ggtitle(paste(instnames[i], l)) +
#annotation_custom(j) +                                         ADDS TEXT TO GRAPH
geom_linerange(aes(ymin=Low, ymax=High)) +
geom_segment(aes(y = Open, yend = Open, xend = Date - width / 2 )) +
geom_segment(aes(y = Close, yend = Close, xend = Date + width / 2)) +
scale_colour_manual(values = c("dn" = "darkred", "up" = "green")) +
guides(colour = FALSE))
plots[[i]] <- get(paste("plot",instnames[i],sep=""))
}
jpeg(file = paste("/Users/ncoutrakon/r/bre/snapshot/out/",sdate,"_bench.jpeg", sep =""),
width = 460, height = 520)
.multiplot(plotlist = plots, cols = plotcol)
dev.off()
bench <- list()
for (i in 1:length(instnames)){
bench[[i]] <-get(instnames[i])
}
names(bench) <- instnames
bench <- lapply(bench, forPlot)
for (i in 1:length(instnames)){
assign(instnames[i], bench[[i]])
}
plots <- list()
for (i in seq(instnames)){
k <- get(instnames[i])
l <- paste(": ",k[dim(k)[1],5]," (" ,k[dim(k)[1],8],"%)", sep = "")
#j <- grobTree(textGrob(l, gp = gpar(fontsize = 9.5),
#                      x = .96, y = .96, hjust = 1, vjust = 1))         ADDS TEXT TO GRAPH
assign(paste("plot",instnames[i],sep=""), ggplot(data=k, aes(x=Date, colour = chg)) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank())+
ggtitle(paste(instnames[i], l)) +
#annotation_custom(j) +                                         ADDS TEXT TO GRAPH
geom_linerange(aes(ymin=Low, ymax=High)) +
geom_segment(aes(y = Open, yend = Open, xend = Date - width / 2 )) +
geom_segment(aes(y = Close, yend = Close, xend = Date + width / 2)) +
scale_colour_manual(values = c("dn" = "darkred", "up" = "green")) +
guides(colour = FALSE))
plots[[i]] <- get(paste("plot",instnames[i],sep=""))
}
tiff(file = paste("/Users/ncoutrakon/r/bre/snapshot/out/",sdate,"_bench.jpeg", sep =""),
width = 460, height = 520)
.multiplot(plotlist = plots, cols = plotcol)
dev.off()
names(bench) <- instnames
bench <- lapply(bench, forPlot)
for (i in 1:length(instnames)){
assign(instnames[i], bench[[i]])
}
plots <- list()
for (i in seq(instnames)){
k <- get(instnames[i])
l <- paste(": ",k[dim(k)[1],5]," (" ,k[dim(k)[1],8],"%)", sep = "")
#j <- grobTree(textGrob(l, gp = gpar(fontsize = 9.5),
#                      x = .96, y = .96, hjust = 1, vjust = 1))         ADDS TEXT TO GRAPH
assign(paste("plot",instnames[i],sep=""), ggplot(data=k, aes(x=Date, colour = chg)) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank())+
ggtitle(paste(instnames[i], l)) +
#annotation_custom(j) +                                         ADDS TEXT TO GRAPH
geom_linerange(aes(ymin=Low, ymax=High)) +
geom_segment(aes(y = Open, yend = Open, xend = Date - width / 2 )) +
geom_segment(aes(y = Close, yend = Close, xend = Date + width / 2)) +
scale_colour_manual(values = c("dn" = "darkred", "up" = "green")) +
guides(colour = FALSE))
plots[[i]] <- get(paste("plot",instnames[i],sep=""))
}
tiff(file = paste("/Users/ncoutrakon/r/bre/snapshot/out/",sdate,"_bench.tiff", sep =""),
width = 460, height = 520)
.multiplot(plotlist = plots, cols = plotcol)
dev.off()
tiff(file = paste("/Users/ncoutrakon/r/bre/snapshot/out/",sdate,"_bench.tiff", sep =""),
width = 460, height = 520)
.multiplot(plotlist = plots, cols = plotcol)
pdf(file = paste("/Users/ncoutrakon/r/bre/snapshot/out/",sdate,"_bench.pdf", sep =""),
width = 460, height = 520)
.multiplot(plotlist = plots, cols = plotcol)
dev.off()
tiff(file = paste("/Users/ncoutrakon/r/bre/snapshot/out/",sdate,"_bench.tiff", sep =""),
width = 460, height = 520)
.multiplot(plotlist = plots, cols = plotcol)
dev.off()
pdf(file = paste("/Users/ncoutrakon/r/bre/snapshot/out/",sdate,"_bench.pdf", sep =""),
width = 460, height = 520)
.multiplot(plotlist = plots, cols = plotcol)
dev.off()
names(bench) <- instnames
bench <- lapply(bench, forPlot)
for (i in 1:length(instnames)){
assign(instnames[i], bench[[i]])
}
plots <- list()
for (i in seq(instnames)){
k <- get(instnames[i])
l <- paste(": ",k[dim(k)[1],5]," (" ,k[dim(k)[1],8],"%)", sep = "")
#j <- grobTree(textGrob(l, gp = gpar(fontsize = 9.5),
#                      x = .96, y = .96, hjust = 1, vjust = 1))         ADDS TEXT TO GRAPH
assign(paste("plot",instnames[i],sep=""), ggplot(data=k, aes(x=Date, colour = chg)) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank())+
ggtitle(paste(instnames[i], l)) +
#annotation_custom(j) +                                         ADDS TEXT TO GRAPH
geom_linerange(aes(ymin=Low, ymax=High)) +
geom_segment(aes(y = Open, yend = Open, xend = Date - width / 2 )) +
geom_segment(aes(y = Close, yend = Close, xend = Date + width / 2)) +
scale_colour_manual(values = c("dn" = "darkred", "up" = "green")) +
guides(colour = FALSE))
plots[[i]] <- get(paste("plot",instnames[i],sep=""))
}
tiff(file = paste("/Users/ncoutrakon/r/bre/snapshot/out/",sdate,"_bench.tiff", sep =""),
width = 460, height = 520)
.multiplot(plotlist = plots, cols = plotcol)
dev.off()
pdf(file = paste("/Users/ncoutrakon/r/bre/snapshot/out/",sdate,"_bench.pdf", sep =""),
width = 460, height = 520)
.multiplot(plotlist = plots, cols = plotcol)
dev.off()
tiff(file = paste("/Users/ncoutrakon/r/bre/snapshot/out/",sdate,"_bench.tiff", sep =""),
width = 460, height = 520)
.multiplot(plotlist = plots, cols = plotcol)
dev.off()
pdf(file = paste("/Users/ncoutrakon/r/bre/snapshot/out/",sdate,"_bench.pdf", sep =""))
.multiplot(plotlist = plots, cols = plotcol)
dev.off()
library(Quandl); library(ggplot2)
library(quantmod); library(grid)
instruments <- c(ES = "CHRIS/CME_ES1", DOW = "YAHOO/INDEX_DJI", CSI300 = "YAHOO/HK_83188",
CL = "CHRIS/ICE_T1", VX = "CHRIS/CBOE_VX1", ZN = "CHRIS/CME_TY1")
plotcol <- ceiling(length(instruments)/4)
source("/Users/ncoutrakon/r/funs/truerange.R")
source("/Users/ncoutrakon/r/.Rprofile")
Quandl.auth("yxdHzTo47PuEETopSm3d")
forPlot <- function(x){
names(x) <- c("Open", "High", "Low", "Close")
x <- data.frame(Date = as.POSIXct(index(x)), x[,1:4])
x$Open[is.na(x$Open)] <- x$Close[which(is.na(x$Open)) - 1]
x$chg <- ifelse(Cl(x) > Op(x),"up", "dn")
x$width <- as.numeric(periodicity(x)[1])
x$pctchg <- round((x[,5] / Lag(x[,5]) - 1)*100, 2)
x
}
tdate <- as.Date(Sys.Date(), "%Y-%m-%d")
instnames <- names(instruments)
for (i in 1:length(instruments)){
assign(instnames[i], Quandl(instruments[i], type = "zoo", start_date = as.character(tdate -20),
end_date = "2016-02-04"))
assign(instnames[i], get(names(instruments[i]))[,1:4])
sdate <- index(last(get(instnames[i])))
}
CL
bench <- list()
for (i in 1:length(instnames)){
bench[[i]] <-get(instnames[i])
}
names(bench) <- instnames
bench <- lapply(bench, forPlot)
for (i in 1:length(instnames)){
assign(instnames[i], bench[[i]])
}
plots <- list()
for (i in seq(instnames)){
k <- get(instnames[i])
l <- paste(": ",k[dim(k)[1],5]," (" ,k[dim(k)[1],8],"%)", sep = "")
#j <- grobTree(textGrob(l, gp = gpar(fontsize = 9.5),
#                      x = .96, y = .96, hjust = 1, vjust = 1))         ADDS TEXT TO GRAPH
assign(paste("plot",instnames[i],sep=""), ggplot(data=k, aes(x=Date, colour = chg)) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank())+
ggtitle(paste(instnames[i], l)) +
#annotation_custom(j) +                                         ADDS TEXT TO GRAPH
geom_linerange(aes(ymin=Low, ymax=High)) +
geom_segment(aes(y = Open, yend = Open, xend = Date - width / 2 )) +
geom_segment(aes(y = Close, yend = Close, xend = Date + width / 2)) +
scale_colour_manual(values = c("dn" = "darkred", "up" = "green")) +
guides(colour = FALSE))
plots[[i]] <- get(paste("plot",instnames[i],sep=""))
}
tiff(file = paste("/Users/ncoutrakon/r/bre/snapshot/out/",sdate,"_bench.tiff", sep =""),
width = 460, height = 520)
.multiplot(plotlist = plots, cols = plotcol)
dev.off()
pdf(file = paste("/Users/ncoutrakon/r/bre/snapshot/out/",sdate,"_bench.pdf", sep =""))
.multiplot(plotlist = plots, cols = plotcol)
dev.off()
#trainUrl <- "https://kaggle2.blob.core.windows.net/competitions-data/kaggle/3004/train.csv?sv=2012-02-12&se=2016-02-12T06%3A29%3A33Z&sr=b&sp=r&sig=v2OCokUIfJCKdZP0u%2F%2FHnhz%2FMA6I%2FZQ52Z8%2BJmfCNa4%3D"
#train <- read.csv(trainUrl); dateDownloaded <- date()
#write.csv(train, "~/r/kaggle/data/train.csv")
library(caret)
train <- read.csv("~/r/kaggle/data/train.csv")
pixelsums <- colSums(train[,-1])
train1 <- train[, c(1, which(pixelsums > 500000))]
nzv <- nearZeroVar(train)
train2 <- train1[,-nzv]
pca <- preProcess(train2, method = "pca")
svd <- svd(train2)
file.exists("~/r/kaggle/data/train.csv")
if(!file.exists("~/r/kaggle/data/train.csv")) train <- read.csv("~/r/kaggle/data/train.csv")
plot(pixelsums)
pca$rotation
plot(pca$x[,1], pca$x[,2])
data("iris")
data(iris)
iris
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
ir.pca <- prcomp(log.ir, center = T, scale. = T)
ir.pca
plot(ir.pca, type = 'l')
summary(ir.pca)
predict(ir.pca, newdata = tail(log.ir, 2))
biplot(ir.pca)
svd.train <- svd(scale(train2))
install.packages("ReadImages")
ir.pca
ir.pca$x
barplot(ir.pca$sdev/ir.pca$sdev[1])
ir.pca
names(ir.pca)
class(ir.pca)
ir.pca$center
ir.pca$scale
ir.pca$rotation
summary(ir.pca)
iris
ir.pca
featv <- ir.pca$rotation[,1:2]
featv
iris
iris
iris1 <- apply(iris[,1:4], 2, function(x) x - colMeans(x))
iris1 <- apply(iris[,1:4], 2, function(x) x - mean(x))
colMeans(iris1)
cov(iris1)
iris.cov <- cov(iris1)
eigen(iris.cov)
iris.eig <- eigen(iris.cov)
feat.vec <- iris.eig$vectors[,1:2]
feat.vec
t(feat.vec)
new.iris <- t(t(feat.vec) %*% t(iris1))
head(new.iris)
new.iris <- sweep(t(t(feat.vec) %*% t(iris1)), 2, function(x) x + colSums(iris)[1:2])
colSums(iris)
colSums(iris[,1:2])
new.iris <- sweep(t(t(feat.vec) %*% t(iris1)), 2, function(x) x + colSums(iris[,1:2]))
new.iris <- sweep(t(t(feat.vec) %*% t(iris1)), 2, colSums(iris[,1:2]), FUN = "+")
new.iris
new.iris <- sweep(t(t(feat.vec) %*% t(iris1)), 2, colSums(iris[,1:2]), FUN = "-")
head(new.iris)
new.iris <- sweep(t(t(feat.vec) %*% t(iris1)), 2, colMeans(iris[,1:2]), FUN = "-")
new.iris
new.iris <- cbind(new.iris, iris[,5])
head(new.iris)
iris
new.iris <- sweep(t(t(feat.vec) %*% t(iris1)), 2, colMeans(iris[,1:2]), FUN = "-")
new.iris <- data.frame(sweep(t(t(feat.vec) %*% t(iris1)), 2, colMeans(iris[,1:2]), FUN = "-"), iris[,5])
head(new.iris)
new.iris <- data.frame(sweep(t(t(feat.vec) %*% t(iris1)), 2, colMeans(iris[,1:2]), FUN = "-"), type = iris[,5])
head(new.iris)
fit <- lm(type ~ X1 + X2, data = new.iris)
fit
class(new.iris[,1])
class(new.iris[,3])
ggplot(data = new.iris, aes(x = X1, y = x2), color = type)
ggplot(data = new.iris, aes(x = X1, y = X2), color = type)
+geom_point()
ggplot(data = new.iris, aes(x = X1, y = X2), color = type) + geom_point()
table(new.iris$type)
ggplot(data = new.iris, aes(x = X1, y = X2, color = type)) + geom_point()
getwd()
file.edit("~/kaggle/PCAex.R")
file.edit("~/r/kaggle/PCAex.R")
iris.eig
data(iris)
iris1 <- apply(iris[,1:4], 2, function(x) x - mean(x))
iris.cov <- cov(iris1)
iris.eig <- eigen(iris.cov)
iris.eig
feat.vec <- iris.eig$vectors[,1:2]
new.iris <- data.frame(sweep(t(t(feat.vec) %*% t(iris1)), 2,
colMeans(iris[,1:2]), FUN = "-"), type = iris[,5])
ggplot(data = new.iris, aes(x = X1, y = X2, color = type)) + geom_point()
head(new.iris)
library(nnet)
fit <- multinom(type ~ X1 + X2, iris.new)
fit <- multinom(type ~ X1 + X2, new.iris)
predict(fit, new.iris, "probs")
probs <- predict(fit, new.iris, "probs")
t(apply(probs, 1, cumsum))
cum.probs <- t(apply(probs, 1, cumsum))
vals <- runif(nrow(new.iris))
fit
exp(coef(fit))
head(new.iris)
probs <- predict(fit, new.iris[sample(1:nrow(new.iris)),], "probs")
probs <- predict(fit, new.iris[sample(1:nrow(new.iris), 10),], "probs")
probs
rowSums(probs)
apply(x, 2, max)
apply(probs, 2, max)
apply(probs, 1, max)
probs
tapply(probs, 1, cumsum)
apply(probs, 1, cumsum)
t(apply(probs, 1, cumsum))
cumsum(1:5)
cum.pros <- t(apply(probs, 1, cumsum))
newdata <- new.iris[sample(nrow(new.iris), 10),]
newdata <- new.iris[sample(nrow(new.iris), 10),]
probs <- predict(fit, newdata, "probs")
cum.pros <- t(apply(probs, 1, cumsum))
vals <- runif(nrow(newdata)))
vals <- runif(nrow(newdata))
vals
tmp <- cbind(cum.pros, vals)
tmp
k <- ncol(probs)
k
head(probs)
probs
tmp
apply(tmp, 1, function(x) length(which(x[1:k] < x[k+1])))
ids <- 1 +apply(tmp, 1, function(x) length(which(x[1:k] < x[k+1])))
ids
names(tmp)
colnames(tmp)
colnames(tmp)[1:2]
colnames(tmp)[c(1,3)]
colnames(tmp)[ids]
pred <- colnames(tmp)[ids]
names(ids)
new.iris[as.numeric(names(ids)),4]
new.iris[as.numeric(names(ids)),]
new.iris[as.numeric(names(ids)),3]
predict(fit)
predict(fit, newdata)
new.iris[as.numeric(names(ids)),3]
head(new.iris)
createDataPartition(y = new.iris$type, p =.70)
inTrain <- createDataPartition(y = new.iris$type, p =.70)
table(new.iris$type[inTrain])
inTrain <- createDataPartition(y = new.iris$type, p =.70, list = F)
table(new.iris$type[inTrain])
train <- new.iris[inTrain,]
test <- new.iris[-inTrain,]
fit <- multinom(type ~ X1 + X2, train)
predict(train)
predict(fit, train)
table(train$type == predict(fit, train))
table(train$type == predict(fit, test))
table(test)
table(test$type)
probs <- predict(fit, train, "probs")
cum.pros <- t(apply(probs, 1, cumsum))
vals <- runif(nrow(train))
tmp <- cbind(cum.pros, vals)
k <- ncol(probs)
ids <- 1 +apply(tmp, 1, function(x) length(which(x[1:k] < x[k+1])))
pred <- colnames(tmp)[ids]
pred
probs <- predict(fit, test, "probs")
cum.pros <- t(apply(probs, 1, cumsum))
vals <- runif(nrow(test))
tmp <- cbind(cum.pros, vals)
k <- ncol(probs)
ids <- 1 +apply(tmp, 1, function(x) length(which(x[1:k] < x[k+1])))
pred <- colnames(tmp)[ids]
pred
table(test$type == predict(fit, test))
table(test$train == predict(fit, train))
inTrain <- createDataPartition(y = new.iris$type, p =.70, list = F)
train <- new.iris[inTrain,]
test <- new.iris[-inTrain,]
fit <- multinom(type ~ X1 + X2, train)
predict(fit, test)
table(test$type == predict(fit, test))
library(caret)
if(!file.exists("~/r/kaggle/data/train.csv")) train <- read.csv("~/r/kaggle/data/train.csv")
if(file.exists("~/r/kaggle/data/train.csv")) train <- read.csv("~/r/kaggle/data/train.csv")
exists(train)
exists("train")
if(!exists("train")) train <- read.csv("~/r/kaggle/data/train.csv")
pixelsums <- colSums(train[,-1])
plot(pixelsums)
train1 <- train[, c(1, which(pixelsums > 500000))]
train1 <- train[, c(1, which(pixelsums > 1000000))]
nzv <- nearZeroVar(train)
train2 <- train1[,-nzv]
svd.train <- svd(scale(train2))
plot(1:length(svd.train$d), svd.train$d)
n <- 10
un <- as.matrix(svd.train$u[,1:n])
vn <- as.matrix(svd.train$v[,1:n])
dn <- as.matrix(svd.train$d[,1:n])
class(svd.train$d)
dn <- as.matrix(svd.train$d[1:n,1:n])
dn <- as.matrix(svd.train$d[1:n])
svd.train1 <- un %*% dn %*%t(vn)
dn <- as.matrix(svd.train$d[1:n, 1:n])
dn <- as.matrix(diag(svd.train$d)[1:n, 1:n])
svd.train1 <- un %*% dn %*%t(vn)
head(svd.train1)
dim(svd.train1)
head(train2$X)
names(train2)
svd.train1 <- cbind(un %*% dn %*%t(vn), train2$X)
names(svd.train1)
dim(svd.train1)
library(nnet); library(caret)
data(iris)
iris1 <- apply(iris[,1:4], 2, function(x) x - mean(x))
iris.cov <- cov(iris1)
iris.eig <- eigen(iris.cov)
iris.eig
feat.vec <- iris.eig$vectors[,1:2]
new.iris <- data.frame(sweep(t(t(feat.vec) %*% t(iris1)), 2,
colMeans(iris[,1:2]), FUN = "-"), type = iris[,5])
class(new.iris)
dim(new.iris)
dim(iris)
class(iris.eig)
summary(iris.eig)
str(iris.eig)
###Look into Accrual for pricing, and Rolls for On/Off the Run
library(ggplot2); library(reshape2)
setwd("~/r/bre/rates"); source("/Users/ncoutrakon/r/funs/rollPrices.R")
timeframe <- c("01-12-2012", "02-01-2017")
timeframe <- as.Date(timeframe, format = "%m-%d-%Y")
USTPrices <- read.table("data/USTPrices.txt", header = T, sep = "\t",
comment.char = "", na.strings = c("NA", "#N/A", "#N/AN/A"),
colClasses = c("character", rep("numeric", 5),
rep("character", 5), rep("numeric", 3))
)
USTPrices <- USTPrices[complete.cases(USTPrices),]
USTPrices[,1] <- as.Date(USTPrices[,1], format = "%m/%d/%Y")
names(USTPrices) <- c("Date","cash2", "cash3", "cash5", "cash7", "cash10",
"cusip2", "cusip3", "cusip5", "cusip7", "cusip10", "fut2", "fut5", "fut10")
load(file = "/Users/ncoutrakon/r/bre/rates/data/fytFly.Rda")
fytFly <- merge(fytFly, USTPrices, by.x = 1, by.y = 1)[,c(1,3,7:11,16:19)]
fytFly <- fytFly[which((fytFly$Date > timeframe[1]) & (fytFly$Date < timeframe[2])),]
#-------------------predetermined
mfixed <- fytFly[,c('Date', 'cusip10')]
mfixed$notion <- fytFly$fut5*1000*15 - fytFly$fut10*1000*21 +10000*fytFly$cash10*1
mfixed$rolled <- rollPrices(mfixed[,c('notion', 'cusip10')])$rolled
mfixed$roll <- rollPrices(mfixed[,c('notion', 'cusip10')])$roll
plug <- mean(mfixed$rolled)
mfixed$rolled <- mfixed$rolled - plug
ggplot(mfixed) + geom_point(aes(Date, rolled, col = cusip10)) +
ggtitle(paste("15xZF - 21xZN + 2x10yr (plug =",round(plug),")", sep =""))
tail(mfixed)
til(fytFly)
tail(fytFly)
head(mfixed)
(dim(mfixed)[1]-1)
mfixed$nchange <- mfixed[,'rolled'] - c( NA, mfixed[1:(dim(mfixed)[1]-1),'rolled'])
head(mfixed)
plot(mfixed$nchange)
summary(mfixed$nchange)
mfixed$nchange <- abs(mfixed[,'rolled'] - c( NA, mfixed[1:(dim(mfixed)[1]-1),'rolled']))
plot(mfixed$nchange)
tail(mfixed)
