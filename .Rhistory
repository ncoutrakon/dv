#adds trade date to each instrument's TrueRange dataframe and orders them
trList <- setNames(lapply(trnames, addTradeDate), as.vector(instnames))
trList <- lapply(trList, setNames, c("TradeDate", "Event", "Event True Range", "6wk Prior True Range"))
meltList <- lapply(trList, melt, id.vars = 1:2)
#creates list of dataframes w outliers and complications removed (see remOutlier fn)
outList <- lapply(trList, remOutlier)
outmeltList <- lapply(outList, melt, id.vars = 1:2)
##GRAPHICS
#graph with outliers
for (i in 1: length(meltList)){
df1 <- as.data.frame(meltList[[i]])
dfname <- names(meltList[i])
##must make column into ordered factor with order we want, even though already ordered how we want
df1 <- transform(df1, Event=reorder(Event, TradeDate))
pdf(paste("./plots/plot", dfname, ".pdf", sep=""))
plotdf1 <- ggplot(df1) + geom_point(aes(Event, value, color = variable)) +
xlab("") + ylab(paste(dfname, "True Range (in points)")) + scale_colour_brewer(palette ="Set1")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(plotdf1)
dev.off()
}
#graph with no outliers
for (i in 1: length(outmeltList)){
df1 <- as.data.frame(outmeltList[[i]])
dfname <- names(outmeltList[i])
#must make column into ordered factor with order we want, even though already ordered how we want
df1 <- transform(df1, Event=reorder(Event, TradeDate))
pdf(paste("./plots/outplot", dfname, ".pdf", sep=""))
plotdf1 <- ggplot(df1) + geom_point(aes(Event, value, color = variable)) +
xlab("") + ylab(paste(dfname, "True Range (in points)")) + scale_colour_brewer(palette ="Set1")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))#+
#scale_x_discrete(labels = df1$Event)
print(plotdf1)
dev.off()
}
instnames
library(Quandl)
library(ggplot2)
library(reshape)
options(digits = 4)
setwd("~/r/bre")
##instruments you wish to pull from Quandl, names are name of object to be created
instruments <- c(VX = "YAHOO/INDEX_VIX", ZN = "YAHOO/INDEX_TNX", ES = "YAHOO/INDEX_GSPC")
#Quandl("CHRIS/CME_SP1") YAHOO/INDEX_GSPC
##FUNCTIONS
#adds the TrueRange Column to a dataframe
tRange <- function(df){
maxdf <- cbind(df[,2] - df[,3], abs(df[,2] - lag(df[,4], k = -1)), abs(df[,3] - lag(df[,4], k=-1)))
TR <- apply(maxdf, 1, max)
TR
}
#finds the Tradeable Dates associated with each event and adds that column to the dataframe
addTradeDate <- function(df){
df <- merge(events[,c(1,6)], df, by.x = 1, by.y = 1)
df <- df[order(df$TradeDate), c(2,1,3:ncol(df))]
df[,3] <- as.numeric(df[,3])
df[,4] <- as.numeric(df[,4])
df
}
#handles the Terrorist WH Threat v Bost Mar problem, also removes Sept 11, Flash Crash, and keeps
#ONLY entries such that TR > ATR for each dataframe
remOutlier <- function(df){
df[which(df$Event == "Twitter WH Threat"), 4] <- df[which(df$Event == "Boston Marathon"), 4]
df <- df[which(df$'Event True Range' > df$'6wk Prior True Range'),]
df <- df[!(df$Event %in% c("September 11", "Flash Crash")),]
df
}
#PROCESSING SCRIPT
#loops through *instruments* and downloads data from Quandl, then assigns it to object of name from *instruments* vector
#renames the column names and only keeps OHLC
instnames <- list()
for (i in 1:length(instruments)){
assign(names(instruments[i]), Quandl(instruments[i], type = "zoo", start_date = "1990-01-01"))
assign(names(instruments[i]), get(names(instruments[i]))[,1:4])
assign(names(instruments[i]), cbind(get(names(instruments)[i]), TR = tRange(get(names(instruments)[i]))))
instnames[[i]] <- names(instruments)[i]
}
#add other instruments to the list.
#EDfront month 3month spread and ED front month fly
ED1 <- Quandl("CHRIS/CME_ED1", type = "zoo", start_date = "1990-01-01")
ED2 <- Quandl("CHRIS/CME_ED2", type = "zoo", start_date = "1990-01-01")
ED3 <- Quandl("CHRIS/CME_ED3", type = "zoo", start_date = "1990-01-01")
ED3m <- ED1 - ED2
ED3m <- setNames(ED3m[,1:4], c("Open", "High", "Low", "Close"))
instnames[[1 + length(instnames)]] <- "ED3m"
EDfly <- ED1 - ED2*2 + ED3
EDfly <- setNames(ED3m[,1:4], c("Open", "High", "Low", "Close"))
instnames[[1 + length(instnames)]] <- "EDfly"
#pulls in events csv for list of events
events <- read.csv("events.csv", row.names = NULL, colClasses = c("character", "Date", "character", "numeric", "character"))
events <- events[order(events$Date,events$Casualties),]
row.names(events) <- 1:dim(events)[1]
##creates TradeDate column in *events* df which list the date the event occured or the next available trading date
events$TradeDate <- events$Date
for (i in 1:length(events$TradeDate)){
while (!(events$TradeDate[i] %in% time(VX))){
events$TradeDate[i] <- events$TradeDate[i] + 1
}
}
##creates True Range dataframe for each instrument, puts it into *trnames* list
trnames <- list()
for (j in 1:length(names(instruments))){
assign(paste(names(instruments)[j], "TR", sep =""), data.frame())
for (i in 1:length(events$TradeDate)){
trevent <- events$Event[i]
trdate <- events$TradeDate[i]
TR <- get(names(instruments)[j])[trdate,5]
ATR <- mean(window(get(names(instruments)[j]), start = trdate - 42, end = trdate-1)[,5])
assign(paste(names(instruments)[j], "TR", sep =""), rbind(get(paste(names(instruments)[j], "TR", sep ="")), c(trevent, TR, ATR)))
}
trnames[[j]] <-  get(paste(names(instruments)[j], "TR", sep =""))
}
#adds trade date to each instrument's TrueRange dataframe and orders them
trList <- setNames(lapply(trnames, addTradeDate), as.vector(instnames))
trList <- lapply(trList, setNames, c("TradeDate", "Event", "Event True Range", "6wk Prior True Range"))
meltList <- lapply(trList, melt, id.vars = 1:2)
#creates list of dataframes w outliers and complications removed (see remOutlier fn)
outList <- lapply(trList, remOutlier)
outmeltList <- lapply(outList, melt, id.vars = 1:2)
##GRAPHICS
#graph with outliers
for (i in 1: length(meltList)){
df1 <- as.data.frame(meltList[[i]])
dfname <- names(meltList[i])
##must make column into ordered factor with order we want, even though already ordered how we want
df1 <- transform(df1, Event=reorder(Event, TradeDate))
pdf(paste("./plots/plot", dfname, ".pdf", sep=""))
plotdf1 <- ggplot(df1) + geom_point(aes(Event, value, color = variable)) +
xlab("") + ylab(paste(dfname, "True Range (in points)")) + scale_colour_brewer(palette ="Set1")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(plotdf1)
dev.off()
}
#graph with no outliers
for (i in 1: length(outmeltList)){
df1 <- as.data.frame(outmeltList[[i]])
dfname <- names(outmeltList[i])
#must make column into ordered factor with order we want, even though already ordered how we want
df1 <- transform(df1, Event=reorder(Event, TradeDate))
pdf(paste("./plots/outplot", dfname, ".pdf", sep=""))
plotdf1 <- ggplot(df1) + geom_point(aes(Event, value, color = variable)) +
xlab("") + ylab(paste(dfname, "True Range (in points)")) + scale_colour_brewer(palette ="Set1")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))#+
#scale_x_discrete(labels = df1$Event)
print(plotdf1)
dev.off()
}
instnames
library(Quandl)
library(ggplot2)
library(reshape)
options(digits = 4)
setwd("~/r/bre")
##instruments you wish to pull from Quandl, names are name of object to be created
instruments <- c(VX = "YAHOO/INDEX_VIX", ZN = "YAHOO/INDEX_TNX", ES = "YAHOO/INDEX_GSPC")
#Quandl("CHRIS/CME_SP1") YAHOO/INDEX_GSPC
##FUNCTIONS
#adds the TrueRange Column to a dataframe
tRange <- function(df){
maxdf <- cbind(df[,2] - df[,3], abs(df[,2] - lag(df[,4], k = -1)), abs(df[,3] - lag(df[,4], k=-1)))
TR <- apply(maxdf, 1, max)
TR
}
#finds the Tradeable Dates associated with each event and adds that column to the dataframe
addTradeDate <- function(df){
df <- merge(events[,c(1,6)], df, by.x = 1, by.y = 1)
df <- df[order(df$TradeDate), c(2,1,3:ncol(df))]
df[,3] <- as.numeric(df[,3])
df[,4] <- as.numeric(df[,4])
df
}
#handles the Terrorist WH Threat v Bost Mar problem, also removes Sept 11, Flash Crash, and keeps
#ONLY entries such that TR > ATR for each dataframe
remOutlier <- function(df){
df[which(df$Event == "Twitter WH Threat"), 4] <- df[which(df$Event == "Boston Marathon"), 4]
df <- df[which(df$'Event True Range' > df$'6wk Prior True Range'),]
df <- df[!(df$Event %in% c("September 11", "Flash Crash")),]
df
}
#PROCESSING SCRIPT
#loops through *instruments* and downloads data from Quandl, then assigns it to object of name from *instruments* vector
#renames the column names and only keeps OHLC
instnames <- list()
for (i in 1:length(instruments)){
assign(names(instruments[i]), Quandl(instruments[i], type = "zoo", start_date = "1990-01-01"))
assign(names(instruments[i]), get(names(instruments[i]))[,1:4])
assign(names(instruments[i]), cbind(get(names(instruments)[i]), TR = tRange(get(names(instruments)[i]))))
instnames[[i]] <- names(instruments)[i]
}
#add other instruments to the list.
#EDfront month 3month spread and ED front month fly
ED1 <- Quandl("CHRIS/CME_ED1", type = "zoo", start_date = "1990-01-01")
ED2 <- Quandl("CHRIS/CME_ED2", type = "zoo", start_date = "1990-01-01")
ED3 <- Quandl("CHRIS/CME_ED3", type = "zoo", start_date = "1990-01-01")
ED3m <- ED1 - ED2
ED3m <- setNames(ED3m[,1:4], c("Open", "High", "Low", "Close"))
ED3m <- cbind(ED3m, TR = tRange(ED3m))
instnames[[1 + length(instnames)]] <- "ED3m"
EDfly <- ED1 - ED2*2 + ED3
EDfly <- setNames(EDfly[,1:4], c("Open", "High", "Low", "Close"))
EDfly <- cbind(EDfly, TR = tRange(EDfly))
instnames[[1 + length(instnames)]] <- "EDfly"
#pulls in events csv for list of events
events <- read.csv("events.csv", row.names = NULL, colClasses = c("character", "Date", "character", "numeric", "character"))
events <- events[order(events$Date,events$Casualties),]
row.names(events) <- 1:dim(events)[1]
##creates TradeDate column in *events* df which list the date the event occured or the next available trading date
events$TradeDate <- events$Date
for (i in 1:length(events$TradeDate)){
while (!(events$TradeDate[i] %in% time(VX))){
events$TradeDate[i] <- events$TradeDate[i] + 1
}
}
##creates True Range dataframe for each instrument, puts it into *trnames* list
trnames <- list()
for (j in 1:length(names(instruments))){
assign(paste(names(instruments)[j], "TR", sep =""), data.frame())
for (i in 1:length(events$TradeDate)){
trevent <- events$Event[i]
trdate <- events$TradeDate[i]
TR <- get(names(instruments)[j])[trdate,5]
ATR <- mean(window(get(names(instruments)[j]), start = trdate - 42, end = trdate-1)[,5])
assign(paste(names(instruments)[j], "TR", sep =""), rbind(get(paste(names(instruments)[j], "TR", sep ="")), c(trevent, TR, ATR)))
}
trnames[[j]] <-  get(paste(names(instruments)[j], "TR", sep =""))
}
#adds trade date to each instrument's TrueRange dataframe and orders them
trList <- setNames(lapply(trnames, addTradeDate), as.vector(instnames))
trList <- lapply(trList, setNames, c("TradeDate", "Event", "Event True Range", "6wk Prior True Range"))
meltList <- lapply(trList, melt, id.vars = 1:2)
#creates list of dataframes w outliers and complications removed (see remOutlier fn)
outList <- lapply(trList, remOutlier)
outmeltList <- lapply(outList, melt, id.vars = 1:2)
##GRAPHICS
#graph with outliers
for (i in 1: length(meltList)){
df1 <- as.data.frame(meltList[[i]])
dfname <- names(meltList[i])
##must make column into ordered factor with order we want, even though already ordered how we want
df1 <- transform(df1, Event=reorder(Event, TradeDate))
pdf(paste("./plots/plot", dfname, ".pdf", sep=""))
plotdf1 <- ggplot(df1) + geom_point(aes(Event, value, color = variable)) +
xlab("") + ylab(paste(dfname, "True Range (in points)")) + scale_colour_brewer(palette ="Set1")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(plotdf1)
dev.off()
}
#graph with no outliers
for (i in 1: length(outmeltList)){
df1 <- as.data.frame(outmeltList[[i]])
dfname <- names(outmeltList[i])
#must make column into ordered factor with order we want, even though already ordered how we want
df1 <- transform(df1, Event=reorder(Event, TradeDate))
pdf(paste("./plots/outplot", dfname, ".pdf", sep=""))
plotdf1 <- ggplot(df1) + geom_point(aes(Event, value, color = variable)) +
xlab("") + ylab(paste(dfname, "True Range (in points)")) + scale_colour_brewer(palette ="Set1")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))#+
#scale_x_discrete(labels = df1$Event)
print(plotdf1)
dev.off()
}
instnames
head(VX)
head(ED3m)
trnames
length(trnames)
instnames[[3]]
library(Quandl)
library(ggplot2)
library(reshape)
options(digits = 4)
setwd("~/r/bre")
##instruments you wish to pull from Quandl, names are name of object to be created
instruments <- c(VX = "YAHOO/INDEX_VIX", ZN = "YAHOO/INDEX_TNX", ES = "YAHOO/INDEX_GSPC")
#Quandl("CHRIS/CME_SP1") YAHOO/INDEX_GSPC
##FUNCTIONS
#adds the TrueRange Column to a dataframe
tRange <- function(df){
maxdf <- cbind(df[,2] - df[,3], abs(df[,2] - lag(df[,4], k = -1)), abs(df[,3] - lag(df[,4], k=-1)))
TR <- apply(maxdf, 1, max)
TR
}
#finds the Tradeable Dates associated with each event and adds that column to the dataframe
addTradeDate <- function(df){
df <- merge(events[,c(1,6)], df, by.x = 1, by.y = 1)
df <- df[order(df$TradeDate), c(2,1,3:ncol(df))]
df[,3] <- as.numeric(df[,3])
df[,4] <- as.numeric(df[,4])
df
}
#handles the Terrorist WH Threat v Bost Mar problem, also removes Sept 11, Flash Crash, and keeps
#ONLY entries such that TR > ATR for each dataframe
remOutlier <- function(df){
df[which(df$Event == "Twitter WH Threat"), 4] <- df[which(df$Event == "Boston Marathon"), 4]
df <- df[which(df$'Event True Range' > df$'6wk Prior True Range'),]
df <- df[!(df$Event %in% c("September 11", "Flash Crash")),]
df
}
#PROCESSING SCRIPT
#loops through *instruments* and downloads data from Quandl, then assigns it to object of name from *instruments* vector
#renames the column names and only keeps OHLC
instnames <- list()
for (i in 1:length(instruments)){
assign(names(instruments[i]), Quandl(instruments[i], type = "zoo", start_date = "1990-01-01"))
assign(names(instruments[i]), get(names(instruments[i]))[,1:4])
assign(names(instruments[i]), cbind(get(names(instruments)[i]), TR = tRange(get(names(instruments)[i]))))
instnames[[i]] <- names(instruments)[i]
}
#add other instruments to the list.
#EDfront month 3month spread and ED front month fly
ED1 <- Quandl("CHRIS/CME_ED1", type = "zoo", start_date = "1990-01-01")
ED2 <- Quandl("CHRIS/CME_ED2", type = "zoo", start_date = "1990-01-01")
ED3 <- Quandl("CHRIS/CME_ED3", type = "zoo", start_date = "1990-01-01")
ED3m <- ED1 - ED2
ED3m <- setNames(ED3m[,1:4], c("Open", "High", "Low", "Close"))
ED3m <- cbind(ED3m, TR = tRange(ED3m))
instnames[[1 + length(instnames)]] <- "ED3m"
EDfly <- ED1 - ED2*2 + ED3
EDfly <- setNames(EDfly[,1:4], c("Open", "High", "Low", "Close"))
EDfly <- cbind(EDfly, TR = tRange(EDfly))
instnames[[1 + length(instnames)]] <- "EDfly"
#pulls in events csv for list of events
events <- read.csv("events.csv", row.names = NULL, colClasses = c("character", "Date", "character", "numeric", "character"))
events <- events[order(events$Date,events$Casualties),]
row.names(events) <- 1:dim(events)[1]
##creates TradeDate column in *events* df which list the date the event occured or the next available trading date
events$TradeDate <- events$Date
for (i in 1:length(events$TradeDate)){
while (!(events$TradeDate[i] %in% time(VX))){
events$TradeDate[i] <- events$TradeDate[i] + 1
}
}
##creates True Range dataframe for each instrument, puts it into *trnames* list
trnames <- list()
for (j in 1:length(instnames){
assign(paste(instnames[[j]], "TR", sep =""), data.frame())
for (i in 1:length(events$TradeDate)){
trevent <- events$Event[i]
trdate <- events$TradeDate[i]
TR <- get(instnames[[j]])[trdate,5]
ATR <- mean(window(get(instnames[[j]]), start = trdate - 42, end = trdate-1)[,5])
assign(paste(instnames[[j]], "TR", sep =""), rbind(get(paste(instnames[[j]], "TR", sep ="")), c(trevent, TR, ATR)))
}
trnames[[j]] <-  get(paste(instnames[[j]], "TR", sep =""))
}
#trnames[[1 + length(trnames)]] <- ED3m
#trnames[[1 + length(trnames)]] <- EDfly
#add extra elements to trnames,ED3m and EDfly
#adds trade date to each instrument's TrueRange dataframe and orders them
trList <- setNames(lapply(trnames, addTradeDate), as.vector(instnames))
trList <- lapply(trList, setNames, c("TradeDate", "Event", "Event True Range", "6wk Prior True Range"))
meltList <- lapply(trList, melt, id.vars = 1:2)
#creates list of dataframes w outliers and complications removed (see remOutlier fn)
outList <- lapply(trList, remOutlier)
outmeltList <- lapply(outList, melt, id.vars = 1:2)
##GRAPHICS
#graph with outliers
for (i in 1: length(meltList)){
df1 <- as.data.frame(meltList[[i]])
dfname <- names(meltList[i])
##must make column into ordered factor with order we want, even though already ordered how we want
df1 <- transform(df1, Event=reorder(Event, TradeDate))
pdf(paste("./plots/plot", dfname, ".pdf", sep=""))
plotdf1 <- ggplot(df1) + geom_point(aes(Event, value, color = variable)) +
xlab("") + ylab(paste(dfname, "True Range (in points)")) + scale_colour_brewer(palette ="Set1")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(plotdf1)
dev.off()
}
#graph with no outliers
for (i in 1: length(outmeltList)){
df1 <- as.data.frame(outmeltList[[i]])
dfname <- names(outmeltList[i])
#must make column into ordered factor with order we want, even though already ordered how we want
df1 <- transform(df1, Event=reorder(Event, TradeDate))
pdf(paste("./plots/outplot", dfname, ".pdf", sep=""))
plotdf1 <- ggplot(df1) + geom_point(aes(Event, value, color = variable)) +
xlab("") + ylab(paste(dfname, "True Range (in points)")) + scale_colour_brewer(palette ="Set1")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))#+
#scale_x_discrete(labels = df1$Event)
print(plotdf1)
dev.off()
}
trnames <- list()
for (j in 1:length(instnames)){
assign(paste(instnames[[j]], "TR", sep =""), data.frame())
for (i in 1:length(events$TradeDate)){
trevent <- events$Event[i]
trdate <- events$TradeDate[i]
TR <- get(instnames[[j]])[trdate,5]
ATR <- mean(window(get(instnames[[j]]), start = trdate - 42, end = trdate-1)[,5])
assign(paste(instnames[[j]], "TR", sep =""), rbind(get(paste(instnames[[j]], "TR", sep ="")), c(trevent, TR, ATR)))
}
trnames[[j]] <-  get(paste(instnames[[j]], "TR", sep =""))
}
library(Quandl)
library(ggplot2)
library(reshape)
options(digits = 4)
setwd("~/r/bre")
##instruments you wish to pull from Quandl, names are name of object to be created
instruments <- c(VX = "YAHOO/INDEX_VIX", ZN = "YAHOO/INDEX_TNX", ES = "YAHOO/INDEX_GSPC")
#Quandl("CHRIS/CME_SP1") YAHOO/INDEX_GSPC
##FUNCTIONS
#adds the TrueRange Column to a dataframe
tRange <- function(df){
maxdf <- cbind(df[,2] - df[,3], abs(df[,2] - lag(df[,4], k = -1)), abs(df[,3] - lag(df[,4], k=-1)))
TR <- apply(maxdf, 1, max)
TR
}
#finds the Tradeable Dates associated with each event and adds that column to the dataframe
addTradeDate <- function(df){
df <- merge(events[,c(1,6)], df, by.x = 1, by.y = 1)
df <- df[order(df$TradeDate), c(2,1,3:ncol(df))]
df[,3] <- as.numeric(df[,3])
df[,4] <- as.numeric(df[,4])
df
}
#handles the Terrorist WH Threat v Bost Mar problem, also removes Sept 11, Flash Crash, and keeps
#ONLY entries such that TR > ATR for each dataframe
remOutlier <- function(df){
df[which(df$Event == "Twitter WH Threat"), 4] <- df[which(df$Event == "Boston Marathon"), 4]
df <- df[which(df$'Event True Range' > df$'6wk Prior True Range'),]
df <- df[!(df$Event %in% c("September 11", "Flash Crash")),]
df
}
#PROCESSING SCRIPT
#loops through *instruments* and downloads data from Quandl, then assigns it to object of name from *instruments* vector
#renames the column names and only keeps OHLC
instnames <- list()
for (i in 1:length(instruments)){
assign(names(instruments[i]), Quandl(instruments[i], type = "zoo", start_date = "1990-01-01"))
assign(names(instruments[i]), get(names(instruments[i]))[,1:4])
assign(names(instruments[i]), cbind(get(names(instruments)[i]), TR = tRange(get(names(instruments)[i]))))
instnames[[i]] <- names(instruments)[i]
}
#add other instruments to the list.
#EDfront month 3month spread and ED front month fly
ED1 <- Quandl("CHRIS/CME_ED1", type = "zoo", start_date = "1990-01-01")
ED2 <- Quandl("CHRIS/CME_ED2", type = "zoo", start_date = "1990-01-01")
ED3 <- Quandl("CHRIS/CME_ED3", type = "zoo", start_date = "1990-01-01")
ED3m <- ED1 - ED2
ED3m <- setNames(ED3m[,1:4], c("Open", "High", "Low", "Close"))
ED3m <- cbind(ED3m, TR = tRange(ED3m))
instnames[[1 + length(instnames)]] <- "ED3m"
EDfly <- ED1 - ED2*2 + ED3
EDfly <- setNames(EDfly[,1:4], c("Open", "High", "Low", "Close"))
EDfly <- cbind(EDfly, TR = tRange(EDfly))
instnames[[1 + length(instnames)]] <- "EDfly"
#pulls in events csv for list of events
events <- read.csv("events.csv", row.names = NULL, colClasses = c("character", "Date", "character", "numeric", "character"))
events <- events[order(events$Date,events$Casualties),]
row.names(events) <- 1:dim(events)[1]
##creates TradeDate column in *events* df which list the date the event occured or the next available trading date
events$TradeDate <- events$Date
for (i in 1:length(events$TradeDate)){
while (!(events$TradeDate[i] %in% time(VX))){
events$TradeDate[i] <- events$TradeDate[i] + 1
}
}
##creates True Range dataframe for each instrument, puts it into *trnames* list
trnames <- list()
for (j in 1:length(instnames)){
assign(paste(instnames[[j]], "TR", sep =""), data.frame())
for (i in 1:length(events$TradeDate)){
trevent <- events$Event[i]
trdate <- events$TradeDate[i]
TR <- get(instnames[[j]])[trdate,5]
ATR <- mean(window(get(instnames[[j]]), start = trdate - 42, end = trdate-1)[,5])
assign(paste(instnames[[j]], "TR", sep =""), rbind(get(paste(instnames[[j]], "TR", sep ="")), c(trevent, TR, ATR)))
}
trnames[[j]] <-  get(paste(instnames[[j]], "TR", sep =""))
}
#trnames[[1 + length(trnames)]] <- ED3m
#trnames[[1 + length(trnames)]] <- EDfly
#add extra elements to trnames,ED3m and EDfly
#adds trade date to each instrument's TrueRange dataframe and orders them
trList <- setNames(lapply(trnames, addTradeDate), as.vector(instnames))
trList <- lapply(trList, setNames, c("TradeDate", "Event", "Event True Range", "6wk Prior True Range"))
meltList <- lapply(trList, melt, id.vars = 1:2)
#creates list of dataframes w outliers and complications removed (see remOutlier fn)
outList <- lapply(trList, remOutlier)
outmeltList <- lapply(outList, melt, id.vars = 1:2)
##GRAPHICS
#graph with outliers
for (i in 1: length(meltList)){
df1 <- as.data.frame(meltList[[i]])
dfname <- names(meltList[i])
##must make column into ordered factor with order we want, even though already ordered how we want
df1 <- transform(df1, Event=reorder(Event, TradeDate))
pdf(paste("./plots/plot", dfname, ".pdf", sep=""))
plotdf1 <- ggplot(df1) + geom_point(aes(Event, value, color = variable)) +
xlab("") + ylab(paste(dfname, "True Range (in points)")) + scale_colour_brewer(palette ="Set1")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(plotdf1)
dev.off()
}
#graph with no outliers
for (i in 1: length(outmeltList)){
df1 <- as.data.frame(outmeltList[[i]])
dfname <- names(outmeltList[i])
#must make column into ordered factor with order we want, even though already ordered how we want
df1 <- transform(df1, Event=reorder(Event, TradeDate))
pdf(paste("./plots/outplot", dfname, ".pdf", sep=""))
plotdf1 <- ggplot(df1) + geom_point(aes(Event, value, color = variable)) +
xlab("") + ylab(paste(dfname, "True Range (in points)")) + scale_colour_brewer(palette ="Set1")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))#+
#scale_x_discrete(labels = df1$Event)
print(plotdf1)
dev.off()
}
head(ED1)
